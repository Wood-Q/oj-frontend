// This file is auto-generated by @hey-api/openapi-ts

import {
  createClient,
  createConfig,
  type OptionsLegacyParser,
} from "@hey-api/client-axios";
import type {
  GetV1AuthLoginUserError,
  GetV1AuthLoginUserResponse,
  PostV1AuthSignInData,
  PostV1AuthSignInError,
  PostV1AuthSignInResponse,
  PostV1AuthSignUpData,
  PostV1AuthSignUpError,
  PostV1AuthSignUpResponse,
  GetV1UsersError,
  GetV1UsersResponse,
  GetV1UsersByIdData,
  GetV1UsersByIdError,
  GetV1UsersByIdResponse,
} from "./types.gen";

export const client = createClient(
  createConfig({
    baseURL: "http://localhost:3000",
    withCredentials: true,
  })
);

/**
 * get current login user
 * get current login user .
 */
export const getV1AuthLoginUser = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetV1AuthLoginUserResponse,
    GetV1AuthLoginUserError,
    ThrowOnError
  >({
    ...options,
    url: "api/v1/auth/loginUser",
  });
};

/**
 * auth user and return access and refresh token
 * Auth user and return access and refresh token.
 */
export const postV1AuthSignIn = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostV1AuthSignInData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PostV1AuthSignInResponse,
    PostV1AuthSignInError,
    ThrowOnError
  >({
    ...options,
    url: "api/v1/auth/sign/in",
  });
};

/**
 * create a new user
 * Create a new user.
 */
export const postV1AuthSignUp = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<PostV1AuthSignUpData, ThrowOnError>
) => {
  return (options?.client ?? client).post<
    PostV1AuthSignUpResponse,
    PostV1AuthSignUpError,
    ThrowOnError
  >({
    ...options,
    url: "api/v1/auth/sign/up",
  });
};

/**
 * get all exists users
 * Get all exists users.
 */
export const getV1Users = <ThrowOnError extends boolean = false>(
  options?: OptionsLegacyParser<unknown, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetV1UsersResponse,
    GetV1UsersError,
    ThrowOnError
  >({
    ...options,
    url: "api/v1/users",
  });
};

/**
 * get user by given ID
 * Get user by given ID.
 */
export const getV1UsersById = <ThrowOnError extends boolean = false>(
  options: OptionsLegacyParser<GetV1UsersByIdData, ThrowOnError>
) => {
  return (options?.client ?? client).get<
    GetV1UsersByIdResponse,
    GetV1UsersByIdError,
    ThrowOnError
  >({
    ...options,
    url: "api/v1/users/{id}",
  });
};
